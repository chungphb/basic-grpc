// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/calculator/v1/calculator.proto

#include "protos/calculator/v1/calculator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace calculator {
namespace v1 {
PROTOBUF_CONSTEXPR AddRequest::AddRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addend_1_)*/0
  , /*decltype(_impl_.addend_2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddRequestDefaultTypeInternal() {}
  union {
    AddRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddRequestDefaultTypeInternal _AddRequest_default_instance_;
PROTOBUF_CONSTEXPR AddResponse::AddResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddResponseDefaultTypeInternal() {}
  union {
    AddResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddResponseDefaultTypeInternal _AddResponse_default_instance_;
PROTOBUF_CONSTEXPR SubRequest::SubRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.minuend_)*/0
  , /*decltype(_impl_.subtrahend_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubRequestDefaultTypeInternal() {}
  union {
    SubRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubRequestDefaultTypeInternal _SubRequest_default_instance_;
PROTOBUF_CONSTEXPR SubResponse::SubResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.difference_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubResponseDefaultTypeInternal() {}
  union {
    SubResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubResponseDefaultTypeInternal _SubResponse_default_instance_;
PROTOBUF_CONSTEXPR MulRequest::MulRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.multiplicand_)*/0
  , /*decltype(_impl_.multiplier_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MulRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MulRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MulRequestDefaultTypeInternal() {}
  union {
    MulRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MulRequestDefaultTypeInternal _MulRequest_default_instance_;
PROTOBUF_CONSTEXPR MulResponse::MulResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.product_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MulResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MulResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MulResponseDefaultTypeInternal() {}
  union {
    MulResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MulResponseDefaultTypeInternal _MulResponse_default_instance_;
PROTOBUF_CONSTEXPR DivRequest::DivRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dividend_)*/0
  , /*decltype(_impl_.divisor_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DivRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DivRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DivRequestDefaultTypeInternal() {}
  union {
    DivRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DivRequestDefaultTypeInternal _DivRequest_default_instance_;
PROTOBUF_CONSTEXPR DivResponse::DivResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quotient_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DivResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DivResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DivResponseDefaultTypeInternal() {}
  union {
    DivResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DivResponseDefaultTypeInternal _DivResponse_default_instance_;
PROTOBUF_CONSTEXPR ModRequest::ModRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dividend_)*/0
  , /*decltype(_impl_.divisor_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModRequestDefaultTypeInternal() {}
  union {
    ModRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModRequestDefaultTypeInternal _ModRequest_default_instance_;
PROTOBUF_CONSTEXPR ModResponse::ModResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModResponseDefaultTypeInternal() {}
  union {
    ModResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModResponseDefaultTypeInternal _ModResponse_default_instance_;
}  // namespace v1
}  // namespace calculator
static ::_pb::Metadata file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2fcalculator_2fv1_2fcalculator_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fcalculator_2fv1_2fcalculator_2eproto = nullptr;

const uint32_t TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::AddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::AddRequest, _impl_.addend_1_),
  PROTOBUF_FIELD_OFFSET(::calculator::v1::AddRequest, _impl_.addend_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::AddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::AddResponse, _impl_.sum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::SubRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::SubRequest, _impl_.minuend_),
  PROTOBUF_FIELD_OFFSET(::calculator::v1::SubRequest, _impl_.subtrahend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::SubResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::SubResponse, _impl_.difference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::MulRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::MulRequest, _impl_.multiplicand_),
  PROTOBUF_FIELD_OFFSET(::calculator::v1::MulRequest, _impl_.multiplier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::MulResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::MulResponse, _impl_.product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::DivRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::DivRequest, _impl_.dividend_),
  PROTOBUF_FIELD_OFFSET(::calculator::v1::DivRequest, _impl_.divisor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::DivResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::DivResponse, _impl_.quotient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::ModRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::ModRequest, _impl_.dividend_),
  PROTOBUF_FIELD_OFFSET(::calculator::v1::ModRequest, _impl_.divisor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::ModResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculator::v1::ModResponse, _impl_.result_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::calculator::v1::AddRequest)},
  { 8, -1, -1, sizeof(::calculator::v1::AddResponse)},
  { 15, -1, -1, sizeof(::calculator::v1::SubRequest)},
  { 23, -1, -1, sizeof(::calculator::v1::SubResponse)},
  { 30, -1, -1, sizeof(::calculator::v1::MulRequest)},
  { 38, -1, -1, sizeof(::calculator::v1::MulResponse)},
  { 45, -1, -1, sizeof(::calculator::v1::DivRequest)},
  { 53, -1, -1, sizeof(::calculator::v1::DivResponse)},
  { 60, -1, -1, sizeof(::calculator::v1::ModRequest)},
  { 68, -1, -1, sizeof(::calculator::v1::ModResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::calculator::v1::_AddRequest_default_instance_._instance,
  &::calculator::v1::_AddResponse_default_instance_._instance,
  &::calculator::v1::_SubRequest_default_instance_._instance,
  &::calculator::v1::_SubResponse_default_instance_._instance,
  &::calculator::v1::_MulRequest_default_instance_._instance,
  &::calculator::v1::_MulResponse_default_instance_._instance,
  &::calculator::v1::_DivRequest_default_instance_._instance,
  &::calculator::v1::_DivResponse_default_instance_._instance,
  &::calculator::v1::_ModRequest_default_instance_._instance,
  &::calculator::v1::_ModResponse_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fcalculator_2fv1_2fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%protos/calculator/v1/calculator.proto\022"
  "\rcalculator.v1\"B\n\nAddRequest\022\031\n\010addend_1"
  "\030\001 \001(\005R\007addend1\022\031\n\010addend_2\030\002 \001(\005R\007adden"
  "d2\"\037\n\013AddResponse\022\020\n\003sum\030\001 \001(\003R\003sum\"F\n\nS"
  "ubRequest\022\030\n\007minuend\030\001 \001(\005R\007minuend\022\036\n\ns"
  "ubtrahend\030\002 \001(\005R\nsubtrahend\"-\n\013SubRespon"
  "se\022\036\n\ndifference\030\001 \001(\003R\ndifference\"P\n\nMu"
  "lRequest\022\"\n\014multiplicand\030\001 \001(\005R\014multipli"
  "cand\022\036\n\nmultiplier\030\002 \001(\005R\nmultiplier\"\'\n\013"
  "MulResponse\022\030\n\007product\030\001 \001(\003R\007product\"B\n"
  "\nDivRequest\022\032\n\010dividend\030\001 \001(\005R\010dividend\022"
  "\030\n\007divisor\030\002 \001(\005R\007divisor\")\n\013DivResponse"
  "\022\032\n\010quotient\030\001 \001(\003R\010quotient\"B\n\nModReque"
  "st\022\032\n\010dividend\030\001 \001(\005R\010dividend\022\030\n\007diviso"
  "r\030\002 \001(\005R\007divisor\"%\n\013ModResponse\022\026\n\006resul"
  "t\030\001 \001(\003R\006result2\314\002\n\nCalculator\022>\n\003Add\022\031."
  "calculator.v1.AddRequest\032\032.calculator.v1"
  ".AddResponse\"\000\022>\n\003Sub\022\031.calculator.v1.Su"
  "bRequest\032\032.calculator.v1.SubResponse\"\000\022>"
  "\n\003Mul\022\031.calculator.v1.MulRequest\032\032.calcu"
  "lator.v1.MulResponse\"\000\022>\n\003Div\022\031.calculat"
  "or.v1.DivRequest\032\032.calculator.v1.DivResp"
  "onse\"\000\022>\n\003Mod\022\031.calculator.v1.ModRequest"
  "\032\032.calculator.v1.ModResponse\"\000B\272\001\n\021com.c"
  "alculator.v1B\017CalculatorProtoP\001Z\?github."
  "com/tsingson/grpc-demo/protos/calculator"
  "/v1;calculatorv1\242\002\003CXX\252\002\rCalculator.V1\312\002"
  "\rCalculator\\V1\342\002\031Calculator\\V1\\GPBMetada"
  "ta\352\002\016Calculator::V1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto = {
    false, false, 1147, descriptor_table_protodef_protos_2fcalculator_2fv1_2fcalculator_2eproto,
    "protos/calculator/v1/calculator.proto",
    &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto::offsets,
    file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto, file_level_enum_descriptors_protos_2fcalculator_2fv1_2fcalculator_2eproto,
    file_level_service_descriptors_protos_2fcalculator_2fv1_2fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter() {
  return &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fcalculator_2fv1_2fcalculator_2eproto(&descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto);
namespace calculator {
namespace v1 {

// ===================================================================

class AddRequest::_Internal {
 public:
};

AddRequest::AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculator.v1.AddRequest)
}
AddRequest::AddRequest(const AddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addend_1_){}
    , decltype(_impl_.addend_2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.addend_1_, &from._impl_.addend_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.addend_2_) -
    reinterpret_cast<char*>(&_impl_.addend_1_)) + sizeof(_impl_.addend_2_));
  // @@protoc_insertion_point(copy_constructor:calculator.v1.AddRequest)
}

inline void AddRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addend_1_){0}
    , decltype(_impl_.addend_2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddRequest::~AddRequest() {
  // @@protoc_insertion_point(destructor:calculator.v1.AddRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.v1.AddRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.addend_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.addend_2_) -
      reinterpret_cast<char*>(&_impl_.addend_1_)) + sizeof(_impl_.addend_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 addend_1 = 1 [json_name = "addend1"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.addend_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 addend_2 = 2 [json_name = "addend2"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.addend_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.v1.AddRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addend_1 = 1 [json_name = "addend1"];
  if (this->_internal_addend_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_addend_1(), target);
  }

  // int32 addend_2 = 2 [json_name = "addend2"];
  if (this->_internal_addend_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_addend_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.v1.AddRequest)
  return target;
}

size_t AddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.v1.AddRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addend_1 = 1 [json_name = "addend1"];
  if (this->_internal_addend_1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_addend_1());
  }

  // int32 addend_2 = 2 [json_name = "addend2"];
  if (this->_internal_addend_2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_addend_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddRequest::GetClassData() const { return &_class_data_; }


void AddRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddRequest*>(&to_msg);
  auto& from = static_cast<const AddRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.v1.AddRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_addend_1() != 0) {
    _this->_internal_set_addend_1(from._internal_addend_1());
  }
  if (from._internal_addend_2() != 0) {
    _this->_internal_set_addend_2(from._internal_addend_2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddRequest::CopyFrom(const AddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.v1.AddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequest::IsInitialized() const {
  return true;
}

void AddRequest::InternalSwap(AddRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRequest, _impl_.addend_2_)
      + sizeof(AddRequest::_impl_.addend_2_)
      - PROTOBUF_FIELD_OFFSET(AddRequest, _impl_.addend_1_)>(
          reinterpret_cast<char*>(&_impl_.addend_1_),
          reinterpret_cast<char*>(&other->_impl_.addend_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter, &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once,
      file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[0]);
}

// ===================================================================

class AddResponse::_Internal {
 public:
};

AddResponse::AddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculator.v1.AddResponse)
}
AddResponse::AddResponse(const AddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sum_ = from._impl_.sum_;
  // @@protoc_insertion_point(copy_constructor:calculator.v1.AddResponse)
}

inline void AddResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddResponse::~AddResponse() {
  // @@protoc_insertion_point(destructor:calculator.v1.AddResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.v1.AddResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sum_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sum = 1 [json_name = "sum"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.v1.AddResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sum = 1 [json_name = "sum"];
  if (this->_internal_sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.v1.AddResponse)
  return target;
}

size_t AddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.v1.AddResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 sum = 1 [json_name = "sum"];
  if (this->_internal_sum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddResponse::GetClassData() const { return &_class_data_; }


void AddResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddResponse*>(&to_msg);
  auto& from = static_cast<const AddResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.v1.AddResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sum() != 0) {
    _this->_internal_set_sum(from._internal_sum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddResponse::CopyFrom(const AddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.v1.AddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResponse::IsInitialized() const {
  return true;
}

void AddResponse::InternalSwap(AddResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter, &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once,
      file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[1]);
}

// ===================================================================

class SubRequest::_Internal {
 public:
};

SubRequest::SubRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculator.v1.SubRequest)
}
SubRequest::SubRequest(const SubRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.minuend_){}
    , decltype(_impl_.subtrahend_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.minuend_, &from._impl_.minuend_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.subtrahend_) -
    reinterpret_cast<char*>(&_impl_.minuend_)) + sizeof(_impl_.subtrahend_));
  // @@protoc_insertion_point(copy_constructor:calculator.v1.SubRequest)
}

inline void SubRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.minuend_){0}
    , decltype(_impl_.subtrahend_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubRequest::~SubRequest() {
  // @@protoc_insertion_point(destructor:calculator.v1.SubRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.v1.SubRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.minuend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.subtrahend_) -
      reinterpret_cast<char*>(&_impl_.minuend_)) + sizeof(_impl_.subtrahend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 minuend = 1 [json_name = "minuend"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.minuend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 subtrahend = 2 [json_name = "subtrahend"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.subtrahend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.v1.SubRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minuend = 1 [json_name = "minuend"];
  if (this->_internal_minuend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_minuend(), target);
  }

  // int32 subtrahend = 2 [json_name = "subtrahend"];
  if (this->_internal_subtrahend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_subtrahend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.v1.SubRequest)
  return target;
}

size_t SubRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.v1.SubRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 minuend = 1 [json_name = "minuend"];
  if (this->_internal_minuend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minuend());
  }

  // int32 subtrahend = 2 [json_name = "subtrahend"];
  if (this->_internal_subtrahend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subtrahend());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubRequest::GetClassData() const { return &_class_data_; }


void SubRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubRequest*>(&to_msg);
  auto& from = static_cast<const SubRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.v1.SubRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_minuend() != 0) {
    _this->_internal_set_minuend(from._internal_minuend());
  }
  if (from._internal_subtrahend() != 0) {
    _this->_internal_set_subtrahend(from._internal_subtrahend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubRequest::CopyFrom(const SubRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.v1.SubRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubRequest::IsInitialized() const {
  return true;
}

void SubRequest::InternalSwap(SubRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubRequest, _impl_.subtrahend_)
      + sizeof(SubRequest::_impl_.subtrahend_)
      - PROTOBUF_FIELD_OFFSET(SubRequest, _impl_.minuend_)>(
          reinterpret_cast<char*>(&_impl_.minuend_),
          reinterpret_cast<char*>(&other->_impl_.minuend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter, &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once,
      file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[2]);
}

// ===================================================================

class SubResponse::_Internal {
 public:
};

SubResponse::SubResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculator.v1.SubResponse)
}
SubResponse::SubResponse(const SubResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.difference_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.difference_ = from._impl_.difference_;
  // @@protoc_insertion_point(copy_constructor:calculator.v1.SubResponse)
}

inline void SubResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.difference_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubResponse::~SubResponse() {
  // @@protoc_insertion_point(destructor:calculator.v1.SubResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.v1.SubResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.difference_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 difference = 1 [json_name = "difference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.difference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.v1.SubResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 difference = 1 [json_name = "difference"];
  if (this->_internal_difference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_difference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.v1.SubResponse)
  return target;
}

size_t SubResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.v1.SubResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 difference = 1 [json_name = "difference"];
  if (this->_internal_difference() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_difference());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubResponse::GetClassData() const { return &_class_data_; }


void SubResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubResponse*>(&to_msg);
  auto& from = static_cast<const SubResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.v1.SubResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_difference() != 0) {
    _this->_internal_set_difference(from._internal_difference());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubResponse::CopyFrom(const SubResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.v1.SubResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubResponse::IsInitialized() const {
  return true;
}

void SubResponse::InternalSwap(SubResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.difference_, other->_impl_.difference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter, &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once,
      file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[3]);
}

// ===================================================================

class MulRequest::_Internal {
 public:
};

MulRequest::MulRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculator.v1.MulRequest)
}
MulRequest::MulRequest(const MulRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MulRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.multiplicand_){}
    , decltype(_impl_.multiplier_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.multiplicand_, &from._impl_.multiplicand_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.multiplier_) -
    reinterpret_cast<char*>(&_impl_.multiplicand_)) + sizeof(_impl_.multiplier_));
  // @@protoc_insertion_point(copy_constructor:calculator.v1.MulRequest)
}

inline void MulRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.multiplicand_){0}
    , decltype(_impl_.multiplier_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MulRequest::~MulRequest() {
  // @@protoc_insertion_point(destructor:calculator.v1.MulRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MulRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MulRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MulRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.v1.MulRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.multiplicand_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.multiplier_) -
      reinterpret_cast<char*>(&_impl_.multiplicand_)) + sizeof(_impl_.multiplier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MulRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 multiplicand = 1 [json_name = "multiplicand"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.multiplicand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 multiplier = 2 [json_name = "multiplier"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MulRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.v1.MulRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 multiplicand = 1 [json_name = "multiplicand"];
  if (this->_internal_multiplicand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_multiplicand(), target);
  }

  // int32 multiplier = 2 [json_name = "multiplier"];
  if (this->_internal_multiplier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_multiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.v1.MulRequest)
  return target;
}

size_t MulRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.v1.MulRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 multiplicand = 1 [json_name = "multiplicand"];
  if (this->_internal_multiplicand() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_multiplicand());
  }

  // int32 multiplier = 2 [json_name = "multiplier"];
  if (this->_internal_multiplier() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_multiplier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MulRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MulRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MulRequest::GetClassData() const { return &_class_data_; }


void MulRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MulRequest*>(&to_msg);
  auto& from = static_cast<const MulRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.v1.MulRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_multiplicand() != 0) {
    _this->_internal_set_multiplicand(from._internal_multiplicand());
  }
  if (from._internal_multiplier() != 0) {
    _this->_internal_set_multiplier(from._internal_multiplier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MulRequest::CopyFrom(const MulRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.v1.MulRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulRequest::IsInitialized() const {
  return true;
}

void MulRequest::InternalSwap(MulRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MulRequest, _impl_.multiplier_)
      + sizeof(MulRequest::_impl_.multiplier_)
      - PROTOBUF_FIELD_OFFSET(MulRequest, _impl_.multiplicand_)>(
          reinterpret_cast<char*>(&_impl_.multiplicand_),
          reinterpret_cast<char*>(&other->_impl_.multiplicand_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MulRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter, &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once,
      file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[4]);
}

// ===================================================================

class MulResponse::_Internal {
 public:
};

MulResponse::MulResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculator.v1.MulResponse)
}
MulResponse::MulResponse(const MulResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MulResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.product_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.product_ = from._impl_.product_;
  // @@protoc_insertion_point(copy_constructor:calculator.v1.MulResponse)
}

inline void MulResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.product_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MulResponse::~MulResponse() {
  // @@protoc_insertion_point(destructor:calculator.v1.MulResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MulResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MulResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MulResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.v1.MulResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.product_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MulResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 product = 1 [json_name = "product"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.product_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MulResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.v1.MulResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 product = 1 [json_name = "product"];
  if (this->_internal_product() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_product(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.v1.MulResponse)
  return target;
}

size_t MulResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.v1.MulResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 product = 1 [json_name = "product"];
  if (this->_internal_product() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_product());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MulResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MulResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MulResponse::GetClassData() const { return &_class_data_; }


void MulResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MulResponse*>(&to_msg);
  auto& from = static_cast<const MulResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.v1.MulResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_product() != 0) {
    _this->_internal_set_product(from._internal_product());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MulResponse::CopyFrom(const MulResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.v1.MulResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulResponse::IsInitialized() const {
  return true;
}

void MulResponse::InternalSwap(MulResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.product_, other->_impl_.product_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MulResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter, &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once,
      file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[5]);
}

// ===================================================================

class DivRequest::_Internal {
 public:
};

DivRequest::DivRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculator.v1.DivRequest)
}
DivRequest::DivRequest(const DivRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DivRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dividend_){}
    , decltype(_impl_.divisor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dividend_, &from._impl_.dividend_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.divisor_) -
    reinterpret_cast<char*>(&_impl_.dividend_)) + sizeof(_impl_.divisor_));
  // @@protoc_insertion_point(copy_constructor:calculator.v1.DivRequest)
}

inline void DivRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dividend_){0}
    , decltype(_impl_.divisor_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DivRequest::~DivRequest() {
  // @@protoc_insertion_point(destructor:calculator.v1.DivRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DivRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DivRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DivRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.v1.DivRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dividend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.divisor_) -
      reinterpret_cast<char*>(&_impl_.dividend_)) + sizeof(_impl_.divisor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DivRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 dividend = 1 [json_name = "dividend"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dividend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 divisor = 2 [json_name = "divisor"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.divisor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DivRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.v1.DivRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dividend = 1 [json_name = "dividend"];
  if (this->_internal_dividend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dividend(), target);
  }

  // int32 divisor = 2 [json_name = "divisor"];
  if (this->_internal_divisor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_divisor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.v1.DivRequest)
  return target;
}

size_t DivRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.v1.DivRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dividend = 1 [json_name = "dividend"];
  if (this->_internal_dividend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dividend());
  }

  // int32 divisor = 2 [json_name = "divisor"];
  if (this->_internal_divisor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_divisor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DivRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DivRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DivRequest::GetClassData() const { return &_class_data_; }


void DivRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DivRequest*>(&to_msg);
  auto& from = static_cast<const DivRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.v1.DivRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dividend() != 0) {
    _this->_internal_set_dividend(from._internal_dividend());
  }
  if (from._internal_divisor() != 0) {
    _this->_internal_set_divisor(from._internal_divisor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DivRequest::CopyFrom(const DivRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.v1.DivRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivRequest::IsInitialized() const {
  return true;
}

void DivRequest::InternalSwap(DivRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DivRequest, _impl_.divisor_)
      + sizeof(DivRequest::_impl_.divisor_)
      - PROTOBUF_FIELD_OFFSET(DivRequest, _impl_.dividend_)>(
          reinterpret_cast<char*>(&_impl_.dividend_),
          reinterpret_cast<char*>(&other->_impl_.dividend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DivRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter, &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once,
      file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[6]);
}

// ===================================================================

class DivResponse::_Internal {
 public:
};

DivResponse::DivResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculator.v1.DivResponse)
}
DivResponse::DivResponse(const DivResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DivResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quotient_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.quotient_ = from._impl_.quotient_;
  // @@protoc_insertion_point(copy_constructor:calculator.v1.DivResponse)
}

inline void DivResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quotient_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DivResponse::~DivResponse() {
  // @@protoc_insertion_point(destructor:calculator.v1.DivResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DivResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DivResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DivResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.v1.DivResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quotient_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DivResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 quotient = 1 [json_name = "quotient"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.quotient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DivResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.v1.DivResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 quotient = 1 [json_name = "quotient"];
  if (this->_internal_quotient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_quotient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.v1.DivResponse)
  return target;
}

size_t DivResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.v1.DivResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 quotient = 1 [json_name = "quotient"];
  if (this->_internal_quotient() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quotient());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DivResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DivResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DivResponse::GetClassData() const { return &_class_data_; }


void DivResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DivResponse*>(&to_msg);
  auto& from = static_cast<const DivResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.v1.DivResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_quotient() != 0) {
    _this->_internal_set_quotient(from._internal_quotient());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DivResponse::CopyFrom(const DivResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.v1.DivResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivResponse::IsInitialized() const {
  return true;
}

void DivResponse::InternalSwap(DivResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.quotient_, other->_impl_.quotient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DivResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter, &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once,
      file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[7]);
}

// ===================================================================

class ModRequest::_Internal {
 public:
};

ModRequest::ModRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculator.v1.ModRequest)
}
ModRequest::ModRequest(const ModRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dividend_){}
    , decltype(_impl_.divisor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dividend_, &from._impl_.dividend_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.divisor_) -
    reinterpret_cast<char*>(&_impl_.dividend_)) + sizeof(_impl_.divisor_));
  // @@protoc_insertion_point(copy_constructor:calculator.v1.ModRequest)
}

inline void ModRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dividend_){0}
    , decltype(_impl_.divisor_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModRequest::~ModRequest() {
  // @@protoc_insertion_point(destructor:calculator.v1.ModRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.v1.ModRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dividend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.divisor_) -
      reinterpret_cast<char*>(&_impl_.dividend_)) + sizeof(_impl_.divisor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 dividend = 1 [json_name = "dividend"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dividend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 divisor = 2 [json_name = "divisor"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.divisor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.v1.ModRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dividend = 1 [json_name = "dividend"];
  if (this->_internal_dividend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dividend(), target);
  }

  // int32 divisor = 2 [json_name = "divisor"];
  if (this->_internal_divisor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_divisor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.v1.ModRequest)
  return target;
}

size_t ModRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.v1.ModRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dividend = 1 [json_name = "dividend"];
  if (this->_internal_dividend() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dividend());
  }

  // int32 divisor = 2 [json_name = "divisor"];
  if (this->_internal_divisor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_divisor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModRequest::GetClassData() const { return &_class_data_; }


void ModRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModRequest*>(&to_msg);
  auto& from = static_cast<const ModRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.v1.ModRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dividend() != 0) {
    _this->_internal_set_dividend(from._internal_dividend());
  }
  if (from._internal_divisor() != 0) {
    _this->_internal_set_divisor(from._internal_divisor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModRequest::CopyFrom(const ModRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.v1.ModRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModRequest::IsInitialized() const {
  return true;
}

void ModRequest::InternalSwap(ModRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModRequest, _impl_.divisor_)
      + sizeof(ModRequest::_impl_.divisor_)
      - PROTOBUF_FIELD_OFFSET(ModRequest, _impl_.dividend_)>(
          reinterpret_cast<char*>(&_impl_.dividend_),
          reinterpret_cast<char*>(&other->_impl_.dividend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter, &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once,
      file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[8]);
}

// ===================================================================

class ModResponse::_Internal {
 public:
};

ModResponse::ModResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculator.v1.ModResponse)
}
ModResponse::ModResponse(const ModResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:calculator.v1.ModResponse)
}

inline void ModResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModResponse::~ModResponse() {
  // @@protoc_insertion_point(destructor:calculator.v1.ModResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:calculator.v1.ModResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 result = 1 [json_name = "result"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculator.v1.ModResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 result = 1 [json_name = "result"];
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculator.v1.ModResponse)
  return target;
}

size_t ModResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculator.v1.ModResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 result = 1 [json_name = "result"];
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModResponse::GetClassData() const { return &_class_data_; }


void ModResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModResponse*>(&to_msg);
  auto& from = static_cast<const ModResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculator.v1.ModResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModResponse::CopyFrom(const ModResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculator.v1.ModResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModResponse::IsInitialized() const {
  return true;
}

void ModResponse::InternalSwap(ModResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_getter, &descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto_once,
      file_level_metadata_protos_2fcalculator_2fv1_2fcalculator_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace calculator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::calculator::v1::AddRequest*
Arena::CreateMaybeMessage< ::calculator::v1::AddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculator::v1::AddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::calculator::v1::AddResponse*
Arena::CreateMaybeMessage< ::calculator::v1::AddResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculator::v1::AddResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::calculator::v1::SubRequest*
Arena::CreateMaybeMessage< ::calculator::v1::SubRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculator::v1::SubRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::calculator::v1::SubResponse*
Arena::CreateMaybeMessage< ::calculator::v1::SubResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculator::v1::SubResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::calculator::v1::MulRequest*
Arena::CreateMaybeMessage< ::calculator::v1::MulRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculator::v1::MulRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::calculator::v1::MulResponse*
Arena::CreateMaybeMessage< ::calculator::v1::MulResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculator::v1::MulResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::calculator::v1::DivRequest*
Arena::CreateMaybeMessage< ::calculator::v1::DivRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculator::v1::DivRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::calculator::v1::DivResponse*
Arena::CreateMaybeMessage< ::calculator::v1::DivResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculator::v1::DivResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::calculator::v1::ModRequest*
Arena::CreateMaybeMessage< ::calculator::v1::ModRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculator::v1::ModRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::calculator::v1::ModResponse*
Arena::CreateMaybeMessage< ::calculator::v1::ModResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculator::v1::ModResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
