// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/calculator/v1/calculator.proto

#include "protos/calculator/v1/calculator.pb.h"
#include "protos/calculator/v1/calculator.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace calculator {
namespace v1 {

static const char* Calculator_method_names[] = {
  "/calculator.v1.Calculator/Add",
  "/calculator.v1.Calculator/Sub",
  "/calculator.v1.Calculator/Mul",
  "/calculator.v1.Calculator/Div",
  "/calculator.v1.Calculator/Mod",
};

std::unique_ptr< Calculator::Stub> Calculator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Calculator::Stub> stub(new Calculator::Stub(channel, options));
  return stub;
}

Calculator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Add_(Calculator_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sub_(Calculator_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mul_(Calculator_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Div_(Calculator_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mod_(Calculator_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Calculator::Stub::Add(::grpc::ClientContext* context, const ::calculator::v1::AddRequest& request, ::calculator::v1::AddResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calculator::v1::AddRequest, ::calculator::v1::AddResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Add_, context, request, response);
}

void Calculator::Stub::async::Add(::grpc::ClientContext* context, const ::calculator::v1::AddRequest* request, ::calculator::v1::AddResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calculator::v1::AddRequest, ::calculator::v1::AddResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void Calculator::Stub::async::Add(::grpc::ClientContext* context, const ::calculator::v1::AddRequest* request, ::calculator::v1::AddResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::v1::AddResponse>* Calculator::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::calculator::v1::AddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::calculator::v1::AddResponse, ::calculator::v1::AddRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Add_, context, request);
}

::grpc::ClientAsyncResponseReader< ::calculator::v1::AddResponse>* Calculator::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::calculator::v1::AddRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Calculator::Stub::Sub(::grpc::ClientContext* context, const ::calculator::v1::SubRequest& request, ::calculator::v1::SubResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calculator::v1::SubRequest, ::calculator::v1::SubResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Sub_, context, request, response);
}

void Calculator::Stub::async::Sub(::grpc::ClientContext* context, const ::calculator::v1::SubRequest* request, ::calculator::v1::SubResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calculator::v1::SubRequest, ::calculator::v1::SubResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sub_, context, request, response, std::move(f));
}

void Calculator::Stub::async::Sub(::grpc::ClientContext* context, const ::calculator::v1::SubRequest* request, ::calculator::v1::SubResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sub_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::v1::SubResponse>* Calculator::Stub::PrepareAsyncSubRaw(::grpc::ClientContext* context, const ::calculator::v1::SubRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::calculator::v1::SubResponse, ::calculator::v1::SubRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Sub_, context, request);
}

::grpc::ClientAsyncResponseReader< ::calculator::v1::SubResponse>* Calculator::Stub::AsyncSubRaw(::grpc::ClientContext* context, const ::calculator::v1::SubRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Calculator::Stub::Mul(::grpc::ClientContext* context, const ::calculator::v1::MulRequest& request, ::calculator::v1::MulResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calculator::v1::MulRequest, ::calculator::v1::MulResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Mul_, context, request, response);
}

void Calculator::Stub::async::Mul(::grpc::ClientContext* context, const ::calculator::v1::MulRequest* request, ::calculator::v1::MulResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calculator::v1::MulRequest, ::calculator::v1::MulResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mul_, context, request, response, std::move(f));
}

void Calculator::Stub::async::Mul(::grpc::ClientContext* context, const ::calculator::v1::MulRequest* request, ::calculator::v1::MulResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mul_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::v1::MulResponse>* Calculator::Stub::PrepareAsyncMulRaw(::grpc::ClientContext* context, const ::calculator::v1::MulRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::calculator::v1::MulResponse, ::calculator::v1::MulRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Mul_, context, request);
}

::grpc::ClientAsyncResponseReader< ::calculator::v1::MulResponse>* Calculator::Stub::AsyncMulRaw(::grpc::ClientContext* context, const ::calculator::v1::MulRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMulRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Calculator::Stub::Div(::grpc::ClientContext* context, const ::calculator::v1::DivRequest& request, ::calculator::v1::DivResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calculator::v1::DivRequest, ::calculator::v1::DivResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Div_, context, request, response);
}

void Calculator::Stub::async::Div(::grpc::ClientContext* context, const ::calculator::v1::DivRequest* request, ::calculator::v1::DivResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calculator::v1::DivRequest, ::calculator::v1::DivResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Div_, context, request, response, std::move(f));
}

void Calculator::Stub::async::Div(::grpc::ClientContext* context, const ::calculator::v1::DivRequest* request, ::calculator::v1::DivResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Div_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::v1::DivResponse>* Calculator::Stub::PrepareAsyncDivRaw(::grpc::ClientContext* context, const ::calculator::v1::DivRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::calculator::v1::DivResponse, ::calculator::v1::DivRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Div_, context, request);
}

::grpc::ClientAsyncResponseReader< ::calculator::v1::DivResponse>* Calculator::Stub::AsyncDivRaw(::grpc::ClientContext* context, const ::calculator::v1::DivRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDivRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Calculator::Stub::Mod(::grpc::ClientContext* context, const ::calculator::v1::ModRequest& request, ::calculator::v1::ModResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calculator::v1::ModRequest, ::calculator::v1::ModResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Mod_, context, request, response);
}

void Calculator::Stub::async::Mod(::grpc::ClientContext* context, const ::calculator::v1::ModRequest* request, ::calculator::v1::ModResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calculator::v1::ModRequest, ::calculator::v1::ModResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mod_, context, request, response, std::move(f));
}

void Calculator::Stub::async::Mod(::grpc::ClientContext* context, const ::calculator::v1::ModRequest* request, ::calculator::v1::ModResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mod_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::v1::ModResponse>* Calculator::Stub::PrepareAsyncModRaw(::grpc::ClientContext* context, const ::calculator::v1::ModRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::calculator::v1::ModResponse, ::calculator::v1::ModRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Mod_, context, request);
}

::grpc::ClientAsyncResponseReader< ::calculator::v1::ModResponse>* Calculator::Stub::AsyncModRaw(::grpc::ClientContext* context, const ::calculator::v1::ModRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModRaw(context, request, cq);
  result->StartCall();
  return result;
}

Calculator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::v1::AddRequest, ::calculator::v1::AddResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Calculator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calculator::v1::AddRequest* req,
             ::calculator::v1::AddResponse* resp) {
               return service->Add(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::v1::SubRequest, ::calculator::v1::SubResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Calculator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calculator::v1::SubRequest* req,
             ::calculator::v1::SubResponse* resp) {
               return service->Sub(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::v1::MulRequest, ::calculator::v1::MulResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Calculator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calculator::v1::MulRequest* req,
             ::calculator::v1::MulResponse* resp) {
               return service->Mul(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::v1::DivRequest, ::calculator::v1::DivResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Calculator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calculator::v1::DivRequest* req,
             ::calculator::v1::DivResponse* resp) {
               return service->Div(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::v1::ModRequest, ::calculator::v1::ModResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Calculator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calculator::v1::ModRequest* req,
             ::calculator::v1::ModResponse* resp) {
               return service->Mod(ctx, req, resp);
             }, this)));
}

Calculator::Service::~Service() {
}

::grpc::Status Calculator::Service::Add(::grpc::ServerContext* context, const ::calculator::v1::AddRequest* request, ::calculator::v1::AddResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::Sub(::grpc::ServerContext* context, const ::calculator::v1::SubRequest* request, ::calculator::v1::SubResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::Mul(::grpc::ServerContext* context, const ::calculator::v1::MulRequest* request, ::calculator::v1::MulResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::Div(::grpc::ServerContext* context, const ::calculator::v1::DivRequest* request, ::calculator::v1::DivResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::Mod(::grpc::ServerContext* context, const ::calculator::v1::ModRequest* request, ::calculator::v1::ModResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace calculator
}  // namespace v1

