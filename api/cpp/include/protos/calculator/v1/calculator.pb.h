// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/calculator/v1/calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fcalculator_2fv1_2fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fcalculator_2fv1_2fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fcalculator_2fv1_2fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fcalculator_2fv1_2fcalculator_2eproto;
namespace calculator {
namespace v1 {
class AddRequest;
struct AddRequestDefaultTypeInternal;
extern AddRequestDefaultTypeInternal _AddRequest_default_instance_;
class AddResponse;
struct AddResponseDefaultTypeInternal;
extern AddResponseDefaultTypeInternal _AddResponse_default_instance_;
class DivRequest;
struct DivRequestDefaultTypeInternal;
extern DivRequestDefaultTypeInternal _DivRequest_default_instance_;
class DivResponse;
struct DivResponseDefaultTypeInternal;
extern DivResponseDefaultTypeInternal _DivResponse_default_instance_;
class ModRequest;
struct ModRequestDefaultTypeInternal;
extern ModRequestDefaultTypeInternal _ModRequest_default_instance_;
class ModResponse;
struct ModResponseDefaultTypeInternal;
extern ModResponseDefaultTypeInternal _ModResponse_default_instance_;
class MulRequest;
struct MulRequestDefaultTypeInternal;
extern MulRequestDefaultTypeInternal _MulRequest_default_instance_;
class MulResponse;
struct MulResponseDefaultTypeInternal;
extern MulResponseDefaultTypeInternal _MulResponse_default_instance_;
class SubRequest;
struct SubRequestDefaultTypeInternal;
extern SubRequestDefaultTypeInternal _SubRequest_default_instance_;
class SubResponse;
struct SubResponseDefaultTypeInternal;
extern SubResponseDefaultTypeInternal _SubResponse_default_instance_;
}  // namespace v1
}  // namespace calculator
PROTOBUF_NAMESPACE_OPEN
template<> ::calculator::v1::AddRequest* Arena::CreateMaybeMessage<::calculator::v1::AddRequest>(Arena*);
template<> ::calculator::v1::AddResponse* Arena::CreateMaybeMessage<::calculator::v1::AddResponse>(Arena*);
template<> ::calculator::v1::DivRequest* Arena::CreateMaybeMessage<::calculator::v1::DivRequest>(Arena*);
template<> ::calculator::v1::DivResponse* Arena::CreateMaybeMessage<::calculator::v1::DivResponse>(Arena*);
template<> ::calculator::v1::ModRequest* Arena::CreateMaybeMessage<::calculator::v1::ModRequest>(Arena*);
template<> ::calculator::v1::ModResponse* Arena::CreateMaybeMessage<::calculator::v1::ModResponse>(Arena*);
template<> ::calculator::v1::MulRequest* Arena::CreateMaybeMessage<::calculator::v1::MulRequest>(Arena*);
template<> ::calculator::v1::MulResponse* Arena::CreateMaybeMessage<::calculator::v1::MulResponse>(Arena*);
template<> ::calculator::v1::SubRequest* Arena::CreateMaybeMessage<::calculator::v1::SubRequest>(Arena*);
template<> ::calculator::v1::SubResponse* Arena::CreateMaybeMessage<::calculator::v1::SubResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace calculator {
namespace v1 {

// ===================================================================

class AddRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.v1.AddRequest) */ {
 public:
  inline AddRequest() : AddRequest(nullptr) {}
  ~AddRequest() override;
  explicit PROTOBUF_CONSTEXPR AddRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRequest(const AddRequest& from);
  AddRequest(AddRequest&& from) noexcept
    : AddRequest() {
    *this = ::std::move(from);
  }

  inline AddRequest& operator=(const AddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRequest& operator=(AddRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRequest* internal_default_instance() {
    return reinterpret_cast<const AddRequest*>(
               &_AddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddRequest& a, AddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRequest& from) {
    AddRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.v1.AddRequest";
  }
  protected:
  explicit AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddend1FieldNumber = 1,
    kAddend2FieldNumber = 2,
  };
  // int32 addend_1 = 1 [json_name = "addend1"];
  void clear_addend_1();
  int32_t addend_1() const;
  void set_addend_1(int32_t value);
  private:
  int32_t _internal_addend_1() const;
  void _internal_set_addend_1(int32_t value);
  public:

  // int32 addend_2 = 2 [json_name = "addend2"];
  void clear_addend_2();
  int32_t addend_2() const;
  void set_addend_2(int32_t value);
  private:
  int32_t _internal_addend_2() const;
  void _internal_set_addend_2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.v1.AddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t addend_1_;
    int32_t addend_2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class AddResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.v1.AddResponse) */ {
 public:
  inline AddResponse() : AddResponse(nullptr) {}
  ~AddResponse() override;
  explicit PROTOBUF_CONSTEXPR AddResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddResponse(const AddResponse& from);
  AddResponse(AddResponse&& from) noexcept
    : AddResponse() {
    *this = ::std::move(from);
  }

  inline AddResponse& operator=(const AddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResponse& operator=(AddResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddResponse* internal_default_instance() {
    return reinterpret_cast<const AddResponse*>(
               &_AddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddResponse& a, AddResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddResponse& from) {
    AddResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.v1.AddResponse";
  }
  protected:
  explicit AddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSumFieldNumber = 1,
  };
  // int64 sum = 1 [json_name = "sum"];
  void clear_sum();
  int64_t sum() const;
  void set_sum(int64_t value);
  private:
  int64_t _internal_sum() const;
  void _internal_set_sum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.v1.AddResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t sum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class SubRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.v1.SubRequest) */ {
 public:
  inline SubRequest() : SubRequest(nullptr) {}
  ~SubRequest() override;
  explicit PROTOBUF_CONSTEXPR SubRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubRequest(const SubRequest& from);
  SubRequest(SubRequest&& from) noexcept
    : SubRequest() {
    *this = ::std::move(from);
  }

  inline SubRequest& operator=(const SubRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubRequest& operator=(SubRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubRequest* internal_default_instance() {
    return reinterpret_cast<const SubRequest*>(
               &_SubRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubRequest& a, SubRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubRequest& from) {
    SubRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.v1.SubRequest";
  }
  protected:
  explicit SubRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinuendFieldNumber = 1,
    kSubtrahendFieldNumber = 2,
  };
  // int32 minuend = 1 [json_name = "minuend"];
  void clear_minuend();
  int32_t minuend() const;
  void set_minuend(int32_t value);
  private:
  int32_t _internal_minuend() const;
  void _internal_set_minuend(int32_t value);
  public:

  // int32 subtrahend = 2 [json_name = "subtrahend"];
  void clear_subtrahend();
  int32_t subtrahend() const;
  void set_subtrahend(int32_t value);
  private:
  int32_t _internal_subtrahend() const;
  void _internal_set_subtrahend(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.v1.SubRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t minuend_;
    int32_t subtrahend_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class SubResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.v1.SubResponse) */ {
 public:
  inline SubResponse() : SubResponse(nullptr) {}
  ~SubResponse() override;
  explicit PROTOBUF_CONSTEXPR SubResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubResponse(const SubResponse& from);
  SubResponse(SubResponse&& from) noexcept
    : SubResponse() {
    *this = ::std::move(from);
  }

  inline SubResponse& operator=(const SubResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubResponse& operator=(SubResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubResponse* internal_default_instance() {
    return reinterpret_cast<const SubResponse*>(
               &_SubResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubResponse& a, SubResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubResponse& from) {
    SubResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.v1.SubResponse";
  }
  protected:
  explicit SubResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDifferenceFieldNumber = 1,
  };
  // int64 difference = 1 [json_name = "difference"];
  void clear_difference();
  int64_t difference() const;
  void set_difference(int64_t value);
  private:
  int64_t _internal_difference() const;
  void _internal_set_difference(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.v1.SubResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t difference_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class MulRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.v1.MulRequest) */ {
 public:
  inline MulRequest() : MulRequest(nullptr) {}
  ~MulRequest() override;
  explicit PROTOBUF_CONSTEXPR MulRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MulRequest(const MulRequest& from);
  MulRequest(MulRequest&& from) noexcept
    : MulRequest() {
    *this = ::std::move(from);
  }

  inline MulRequest& operator=(const MulRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MulRequest& operator=(MulRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MulRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MulRequest* internal_default_instance() {
    return reinterpret_cast<const MulRequest*>(
               &_MulRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MulRequest& a, MulRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MulRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MulRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MulRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MulRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MulRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MulRequest& from) {
    MulRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MulRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.v1.MulRequest";
  }
  protected:
  explicit MulRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiplicandFieldNumber = 1,
    kMultiplierFieldNumber = 2,
  };
  // int32 multiplicand = 1 [json_name = "multiplicand"];
  void clear_multiplicand();
  int32_t multiplicand() const;
  void set_multiplicand(int32_t value);
  private:
  int32_t _internal_multiplicand() const;
  void _internal_set_multiplicand(int32_t value);
  public:

  // int32 multiplier = 2 [json_name = "multiplier"];
  void clear_multiplier();
  int32_t multiplier() const;
  void set_multiplier(int32_t value);
  private:
  int32_t _internal_multiplier() const;
  void _internal_set_multiplier(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.v1.MulRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t multiplicand_;
    int32_t multiplier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class MulResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.v1.MulResponse) */ {
 public:
  inline MulResponse() : MulResponse(nullptr) {}
  ~MulResponse() override;
  explicit PROTOBUF_CONSTEXPR MulResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MulResponse(const MulResponse& from);
  MulResponse(MulResponse&& from) noexcept
    : MulResponse() {
    *this = ::std::move(from);
  }

  inline MulResponse& operator=(const MulResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MulResponse& operator=(MulResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MulResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MulResponse* internal_default_instance() {
    return reinterpret_cast<const MulResponse*>(
               &_MulResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MulResponse& a, MulResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MulResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MulResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MulResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MulResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MulResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MulResponse& from) {
    MulResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MulResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.v1.MulResponse";
  }
  protected:
  explicit MulResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductFieldNumber = 1,
  };
  // int64 product = 1 [json_name = "product"];
  void clear_product();
  int64_t product() const;
  void set_product(int64_t value);
  private:
  int64_t _internal_product() const;
  void _internal_set_product(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.v1.MulResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t product_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class DivRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.v1.DivRequest) */ {
 public:
  inline DivRequest() : DivRequest(nullptr) {}
  ~DivRequest() override;
  explicit PROTOBUF_CONSTEXPR DivRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DivRequest(const DivRequest& from);
  DivRequest(DivRequest&& from) noexcept
    : DivRequest() {
    *this = ::std::move(from);
  }

  inline DivRequest& operator=(const DivRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DivRequest& operator=(DivRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DivRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DivRequest* internal_default_instance() {
    return reinterpret_cast<const DivRequest*>(
               &_DivRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DivRequest& a, DivRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DivRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DivRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DivRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DivRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DivRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DivRequest& from) {
    DivRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DivRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.v1.DivRequest";
  }
  protected:
  explicit DivRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDividendFieldNumber = 1,
    kDivisorFieldNumber = 2,
  };
  // int32 dividend = 1 [json_name = "dividend"];
  void clear_dividend();
  int32_t dividend() const;
  void set_dividend(int32_t value);
  private:
  int32_t _internal_dividend() const;
  void _internal_set_dividend(int32_t value);
  public:

  // int32 divisor = 2 [json_name = "divisor"];
  void clear_divisor();
  int32_t divisor() const;
  void set_divisor(int32_t value);
  private:
  int32_t _internal_divisor() const;
  void _internal_set_divisor(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.v1.DivRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t dividend_;
    int32_t divisor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class DivResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.v1.DivResponse) */ {
 public:
  inline DivResponse() : DivResponse(nullptr) {}
  ~DivResponse() override;
  explicit PROTOBUF_CONSTEXPR DivResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DivResponse(const DivResponse& from);
  DivResponse(DivResponse&& from) noexcept
    : DivResponse() {
    *this = ::std::move(from);
  }

  inline DivResponse& operator=(const DivResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DivResponse& operator=(DivResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DivResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DivResponse* internal_default_instance() {
    return reinterpret_cast<const DivResponse*>(
               &_DivResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DivResponse& a, DivResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DivResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DivResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DivResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DivResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DivResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DivResponse& from) {
    DivResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DivResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.v1.DivResponse";
  }
  protected:
  explicit DivResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuotientFieldNumber = 1,
  };
  // int64 quotient = 1 [json_name = "quotient"];
  void clear_quotient();
  int64_t quotient() const;
  void set_quotient(int64_t value);
  private:
  int64_t _internal_quotient() const;
  void _internal_set_quotient(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.v1.DivResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t quotient_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class ModRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.v1.ModRequest) */ {
 public:
  inline ModRequest() : ModRequest(nullptr) {}
  ~ModRequest() override;
  explicit PROTOBUF_CONSTEXPR ModRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModRequest(const ModRequest& from);
  ModRequest(ModRequest&& from) noexcept
    : ModRequest() {
    *this = ::std::move(from);
  }

  inline ModRequest& operator=(const ModRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModRequest& operator=(ModRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModRequest* internal_default_instance() {
    return reinterpret_cast<const ModRequest*>(
               &_ModRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ModRequest& a, ModRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModRequest& from) {
    ModRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.v1.ModRequest";
  }
  protected:
  explicit ModRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDividendFieldNumber = 1,
    kDivisorFieldNumber = 2,
  };
  // int32 dividend = 1 [json_name = "dividend"];
  void clear_dividend();
  int32_t dividend() const;
  void set_dividend(int32_t value);
  private:
  int32_t _internal_dividend() const;
  void _internal_set_dividend(int32_t value);
  public:

  // int32 divisor = 2 [json_name = "divisor"];
  void clear_divisor();
  int32_t divisor() const;
  void set_divisor(int32_t value);
  private:
  int32_t _internal_divisor() const;
  void _internal_set_divisor(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.v1.ModRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t dividend_;
    int32_t divisor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto;
};
// -------------------------------------------------------------------

class ModResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.v1.ModResponse) */ {
 public:
  inline ModResponse() : ModResponse(nullptr) {}
  ~ModResponse() override;
  explicit PROTOBUF_CONSTEXPR ModResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModResponse(const ModResponse& from);
  ModResponse(ModResponse&& from) noexcept
    : ModResponse() {
    *this = ::std::move(from);
  }

  inline ModResponse& operator=(const ModResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModResponse& operator=(ModResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModResponse* internal_default_instance() {
    return reinterpret_cast<const ModResponse*>(
               &_ModResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ModResponse& a, ModResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModResponse& from) {
    ModResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.v1.ModResponse";
  }
  protected:
  explicit ModResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1 [json_name = "result"];
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.v1.ModResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fcalculator_2fv1_2fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddRequest

// int32 addend_1 = 1 [json_name = "addend1"];
inline void AddRequest::clear_addend_1() {
  _impl_.addend_1_ = 0;
}
inline int32_t AddRequest::_internal_addend_1() const {
  return _impl_.addend_1_;
}
inline int32_t AddRequest::addend_1() const {
  // @@protoc_insertion_point(field_get:calculator.v1.AddRequest.addend_1)
  return _internal_addend_1();
}
inline void AddRequest::_internal_set_addend_1(int32_t value) {
  
  _impl_.addend_1_ = value;
}
inline void AddRequest::set_addend_1(int32_t value) {
  _internal_set_addend_1(value);
  // @@protoc_insertion_point(field_set:calculator.v1.AddRequest.addend_1)
}

// int32 addend_2 = 2 [json_name = "addend2"];
inline void AddRequest::clear_addend_2() {
  _impl_.addend_2_ = 0;
}
inline int32_t AddRequest::_internal_addend_2() const {
  return _impl_.addend_2_;
}
inline int32_t AddRequest::addend_2() const {
  // @@protoc_insertion_point(field_get:calculator.v1.AddRequest.addend_2)
  return _internal_addend_2();
}
inline void AddRequest::_internal_set_addend_2(int32_t value) {
  
  _impl_.addend_2_ = value;
}
inline void AddRequest::set_addend_2(int32_t value) {
  _internal_set_addend_2(value);
  // @@protoc_insertion_point(field_set:calculator.v1.AddRequest.addend_2)
}

// -------------------------------------------------------------------

// AddResponse

// int64 sum = 1 [json_name = "sum"];
inline void AddResponse::clear_sum() {
  _impl_.sum_ = int64_t{0};
}
inline int64_t AddResponse::_internal_sum() const {
  return _impl_.sum_;
}
inline int64_t AddResponse::sum() const {
  // @@protoc_insertion_point(field_get:calculator.v1.AddResponse.sum)
  return _internal_sum();
}
inline void AddResponse::_internal_set_sum(int64_t value) {
  
  _impl_.sum_ = value;
}
inline void AddResponse::set_sum(int64_t value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:calculator.v1.AddResponse.sum)
}

// -------------------------------------------------------------------

// SubRequest

// int32 minuend = 1 [json_name = "minuend"];
inline void SubRequest::clear_minuend() {
  _impl_.minuend_ = 0;
}
inline int32_t SubRequest::_internal_minuend() const {
  return _impl_.minuend_;
}
inline int32_t SubRequest::minuend() const {
  // @@protoc_insertion_point(field_get:calculator.v1.SubRequest.minuend)
  return _internal_minuend();
}
inline void SubRequest::_internal_set_minuend(int32_t value) {
  
  _impl_.minuend_ = value;
}
inline void SubRequest::set_minuend(int32_t value) {
  _internal_set_minuend(value);
  // @@protoc_insertion_point(field_set:calculator.v1.SubRequest.minuend)
}

// int32 subtrahend = 2 [json_name = "subtrahend"];
inline void SubRequest::clear_subtrahend() {
  _impl_.subtrahend_ = 0;
}
inline int32_t SubRequest::_internal_subtrahend() const {
  return _impl_.subtrahend_;
}
inline int32_t SubRequest::subtrahend() const {
  // @@protoc_insertion_point(field_get:calculator.v1.SubRequest.subtrahend)
  return _internal_subtrahend();
}
inline void SubRequest::_internal_set_subtrahend(int32_t value) {
  
  _impl_.subtrahend_ = value;
}
inline void SubRequest::set_subtrahend(int32_t value) {
  _internal_set_subtrahend(value);
  // @@protoc_insertion_point(field_set:calculator.v1.SubRequest.subtrahend)
}

// -------------------------------------------------------------------

// SubResponse

// int64 difference = 1 [json_name = "difference"];
inline void SubResponse::clear_difference() {
  _impl_.difference_ = int64_t{0};
}
inline int64_t SubResponse::_internal_difference() const {
  return _impl_.difference_;
}
inline int64_t SubResponse::difference() const {
  // @@protoc_insertion_point(field_get:calculator.v1.SubResponse.difference)
  return _internal_difference();
}
inline void SubResponse::_internal_set_difference(int64_t value) {
  
  _impl_.difference_ = value;
}
inline void SubResponse::set_difference(int64_t value) {
  _internal_set_difference(value);
  // @@protoc_insertion_point(field_set:calculator.v1.SubResponse.difference)
}

// -------------------------------------------------------------------

// MulRequest

// int32 multiplicand = 1 [json_name = "multiplicand"];
inline void MulRequest::clear_multiplicand() {
  _impl_.multiplicand_ = 0;
}
inline int32_t MulRequest::_internal_multiplicand() const {
  return _impl_.multiplicand_;
}
inline int32_t MulRequest::multiplicand() const {
  // @@protoc_insertion_point(field_get:calculator.v1.MulRequest.multiplicand)
  return _internal_multiplicand();
}
inline void MulRequest::_internal_set_multiplicand(int32_t value) {
  
  _impl_.multiplicand_ = value;
}
inline void MulRequest::set_multiplicand(int32_t value) {
  _internal_set_multiplicand(value);
  // @@protoc_insertion_point(field_set:calculator.v1.MulRequest.multiplicand)
}

// int32 multiplier = 2 [json_name = "multiplier"];
inline void MulRequest::clear_multiplier() {
  _impl_.multiplier_ = 0;
}
inline int32_t MulRequest::_internal_multiplier() const {
  return _impl_.multiplier_;
}
inline int32_t MulRequest::multiplier() const {
  // @@protoc_insertion_point(field_get:calculator.v1.MulRequest.multiplier)
  return _internal_multiplier();
}
inline void MulRequest::_internal_set_multiplier(int32_t value) {
  
  _impl_.multiplier_ = value;
}
inline void MulRequest::set_multiplier(int32_t value) {
  _internal_set_multiplier(value);
  // @@protoc_insertion_point(field_set:calculator.v1.MulRequest.multiplier)
}

// -------------------------------------------------------------------

// MulResponse

// int64 product = 1 [json_name = "product"];
inline void MulResponse::clear_product() {
  _impl_.product_ = int64_t{0};
}
inline int64_t MulResponse::_internal_product() const {
  return _impl_.product_;
}
inline int64_t MulResponse::product() const {
  // @@protoc_insertion_point(field_get:calculator.v1.MulResponse.product)
  return _internal_product();
}
inline void MulResponse::_internal_set_product(int64_t value) {
  
  _impl_.product_ = value;
}
inline void MulResponse::set_product(int64_t value) {
  _internal_set_product(value);
  // @@protoc_insertion_point(field_set:calculator.v1.MulResponse.product)
}

// -------------------------------------------------------------------

// DivRequest

// int32 dividend = 1 [json_name = "dividend"];
inline void DivRequest::clear_dividend() {
  _impl_.dividend_ = 0;
}
inline int32_t DivRequest::_internal_dividend() const {
  return _impl_.dividend_;
}
inline int32_t DivRequest::dividend() const {
  // @@protoc_insertion_point(field_get:calculator.v1.DivRequest.dividend)
  return _internal_dividend();
}
inline void DivRequest::_internal_set_dividend(int32_t value) {
  
  _impl_.dividend_ = value;
}
inline void DivRequest::set_dividend(int32_t value) {
  _internal_set_dividend(value);
  // @@protoc_insertion_point(field_set:calculator.v1.DivRequest.dividend)
}

// int32 divisor = 2 [json_name = "divisor"];
inline void DivRequest::clear_divisor() {
  _impl_.divisor_ = 0;
}
inline int32_t DivRequest::_internal_divisor() const {
  return _impl_.divisor_;
}
inline int32_t DivRequest::divisor() const {
  // @@protoc_insertion_point(field_get:calculator.v1.DivRequest.divisor)
  return _internal_divisor();
}
inline void DivRequest::_internal_set_divisor(int32_t value) {
  
  _impl_.divisor_ = value;
}
inline void DivRequest::set_divisor(int32_t value) {
  _internal_set_divisor(value);
  // @@protoc_insertion_point(field_set:calculator.v1.DivRequest.divisor)
}

// -------------------------------------------------------------------

// DivResponse

// int64 quotient = 1 [json_name = "quotient"];
inline void DivResponse::clear_quotient() {
  _impl_.quotient_ = int64_t{0};
}
inline int64_t DivResponse::_internal_quotient() const {
  return _impl_.quotient_;
}
inline int64_t DivResponse::quotient() const {
  // @@protoc_insertion_point(field_get:calculator.v1.DivResponse.quotient)
  return _internal_quotient();
}
inline void DivResponse::_internal_set_quotient(int64_t value) {
  
  _impl_.quotient_ = value;
}
inline void DivResponse::set_quotient(int64_t value) {
  _internal_set_quotient(value);
  // @@protoc_insertion_point(field_set:calculator.v1.DivResponse.quotient)
}

// -------------------------------------------------------------------

// ModRequest

// int32 dividend = 1 [json_name = "dividend"];
inline void ModRequest::clear_dividend() {
  _impl_.dividend_ = 0;
}
inline int32_t ModRequest::_internal_dividend() const {
  return _impl_.dividend_;
}
inline int32_t ModRequest::dividend() const {
  // @@protoc_insertion_point(field_get:calculator.v1.ModRequest.dividend)
  return _internal_dividend();
}
inline void ModRequest::_internal_set_dividend(int32_t value) {
  
  _impl_.dividend_ = value;
}
inline void ModRequest::set_dividend(int32_t value) {
  _internal_set_dividend(value);
  // @@protoc_insertion_point(field_set:calculator.v1.ModRequest.dividend)
}

// int32 divisor = 2 [json_name = "divisor"];
inline void ModRequest::clear_divisor() {
  _impl_.divisor_ = 0;
}
inline int32_t ModRequest::_internal_divisor() const {
  return _impl_.divisor_;
}
inline int32_t ModRequest::divisor() const {
  // @@protoc_insertion_point(field_get:calculator.v1.ModRequest.divisor)
  return _internal_divisor();
}
inline void ModRequest::_internal_set_divisor(int32_t value) {
  
  _impl_.divisor_ = value;
}
inline void ModRequest::set_divisor(int32_t value) {
  _internal_set_divisor(value);
  // @@protoc_insertion_point(field_set:calculator.v1.ModRequest.divisor)
}

// -------------------------------------------------------------------

// ModResponse

// int64 result = 1 [json_name = "result"];
inline void ModResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t ModResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t ModResponse::result() const {
  // @@protoc_insertion_point(field_get:calculator.v1.ModResponse.result)
  return _internal_result();
}
inline void ModResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void ModResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:calculator.v1.ModResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace calculator

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fcalculator_2fv1_2fcalculator_2eproto
