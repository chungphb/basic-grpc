// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/calculator/v1/calculator.proto

package calculatorv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tsingson/grpc-demo/protos/calculator/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CalculatorName is the fully-qualified name of the Calculator service.
	CalculatorName = "calculator.v1.Calculator"
)

// CalculatorClient is a client for the calculator.v1.Calculator service.
type CalculatorClient interface {
	Add(context.Context, *connect_go.Request[v1.AddRequest]) (*connect_go.Response[v1.AddResponse], error)
	Sub(context.Context, *connect_go.Request[v1.SubRequest]) (*connect_go.Response[v1.SubResponse], error)
	Mul(context.Context, *connect_go.Request[v1.MulRequest]) (*connect_go.Response[v1.MulResponse], error)
	Div(context.Context, *connect_go.Request[v1.DivRequest]) (*connect_go.Response[v1.DivResponse], error)
	Mod(context.Context, *connect_go.Request[v1.ModRequest]) (*connect_go.Response[v1.ModResponse], error)
}

// NewCalculatorClient constructs a client for the calculator.v1.Calculator service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalculatorClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CalculatorClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &calculatorClient{
		add: connect_go.NewClient[v1.AddRequest, v1.AddResponse](
			httpClient,
			baseURL+"/calculator.v1.Calculator/Add",
			opts...,
		),
		sub: connect_go.NewClient[v1.SubRequest, v1.SubResponse](
			httpClient,
			baseURL+"/calculator.v1.Calculator/Sub",
			opts...,
		),
		mul: connect_go.NewClient[v1.MulRequest, v1.MulResponse](
			httpClient,
			baseURL+"/calculator.v1.Calculator/Mul",
			opts...,
		),
		div: connect_go.NewClient[v1.DivRequest, v1.DivResponse](
			httpClient,
			baseURL+"/calculator.v1.Calculator/Div",
			opts...,
		),
		mod: connect_go.NewClient[v1.ModRequest, v1.ModResponse](
			httpClient,
			baseURL+"/calculator.v1.Calculator/Mod",
			opts...,
		),
	}
}

// calculatorClient implements CalculatorClient.
type calculatorClient struct {
	add *connect_go.Client[v1.AddRequest, v1.AddResponse]
	sub *connect_go.Client[v1.SubRequest, v1.SubResponse]
	mul *connect_go.Client[v1.MulRequest, v1.MulResponse]
	div *connect_go.Client[v1.DivRequest, v1.DivResponse]
	mod *connect_go.Client[v1.ModRequest, v1.ModResponse]
}

// Add calls calculator.v1.Calculator.Add.
func (c *calculatorClient) Add(ctx context.Context, req *connect_go.Request[v1.AddRequest]) (*connect_go.Response[v1.AddResponse], error) {
	return c.add.CallUnary(ctx, req)
}

// Sub calls calculator.v1.Calculator.Sub.
func (c *calculatorClient) Sub(ctx context.Context, req *connect_go.Request[v1.SubRequest]) (*connect_go.Response[v1.SubResponse], error) {
	return c.sub.CallUnary(ctx, req)
}

// Mul calls calculator.v1.Calculator.Mul.
func (c *calculatorClient) Mul(ctx context.Context, req *connect_go.Request[v1.MulRequest]) (*connect_go.Response[v1.MulResponse], error) {
	return c.mul.CallUnary(ctx, req)
}

// Div calls calculator.v1.Calculator.Div.
func (c *calculatorClient) Div(ctx context.Context, req *connect_go.Request[v1.DivRequest]) (*connect_go.Response[v1.DivResponse], error) {
	return c.div.CallUnary(ctx, req)
}

// Mod calls calculator.v1.Calculator.Mod.
func (c *calculatorClient) Mod(ctx context.Context, req *connect_go.Request[v1.ModRequest]) (*connect_go.Response[v1.ModResponse], error) {
	return c.mod.CallUnary(ctx, req)
}

// CalculatorHandler is an implementation of the calculator.v1.Calculator service.
type CalculatorHandler interface {
	Add(context.Context, *connect_go.Request[v1.AddRequest]) (*connect_go.Response[v1.AddResponse], error)
	Sub(context.Context, *connect_go.Request[v1.SubRequest]) (*connect_go.Response[v1.SubResponse], error)
	Mul(context.Context, *connect_go.Request[v1.MulRequest]) (*connect_go.Response[v1.MulResponse], error)
	Div(context.Context, *connect_go.Request[v1.DivRequest]) (*connect_go.Response[v1.DivResponse], error)
	Mod(context.Context, *connect_go.Request[v1.ModRequest]) (*connect_go.Response[v1.ModResponse], error)
}

// NewCalculatorHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalculatorHandler(svc CalculatorHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/calculator.v1.Calculator/Add", connect_go.NewUnaryHandler(
		"/calculator.v1.Calculator/Add",
		svc.Add,
		opts...,
	))
	mux.Handle("/calculator.v1.Calculator/Sub", connect_go.NewUnaryHandler(
		"/calculator.v1.Calculator/Sub",
		svc.Sub,
		opts...,
	))
	mux.Handle("/calculator.v1.Calculator/Mul", connect_go.NewUnaryHandler(
		"/calculator.v1.Calculator/Mul",
		svc.Mul,
		opts...,
	))
	mux.Handle("/calculator.v1.Calculator/Div", connect_go.NewUnaryHandler(
		"/calculator.v1.Calculator/Div",
		svc.Div,
		opts...,
	))
	mux.Handle("/calculator.v1.Calculator/Mod", connect_go.NewUnaryHandler(
		"/calculator.v1.Calculator/Mod",
		svc.Mod,
		opts...,
	))
	return "/calculator.v1.Calculator/", mux
}

// UnimplementedCalculatorHandler returns CodeUnimplemented from all methods.
type UnimplementedCalculatorHandler struct{}

func (UnimplementedCalculatorHandler) Add(context.Context, *connect_go.Request[v1.AddRequest]) (*connect_go.Response[v1.AddResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("calculator.v1.Calculator.Add is not implemented"))
}

func (UnimplementedCalculatorHandler) Sub(context.Context, *connect_go.Request[v1.SubRequest]) (*connect_go.Response[v1.SubResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("calculator.v1.Calculator.Sub is not implemented"))
}

func (UnimplementedCalculatorHandler) Mul(context.Context, *connect_go.Request[v1.MulRequest]) (*connect_go.Response[v1.MulResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("calculator.v1.Calculator.Mul is not implemented"))
}

func (UnimplementedCalculatorHandler) Div(context.Context, *connect_go.Request[v1.DivRequest]) (*connect_go.Response[v1.DivResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("calculator.v1.Calculator.Div is not implemented"))
}

func (UnimplementedCalculatorHandler) Mod(context.Context, *connect_go.Request[v1.ModRequest]) (*connect_go.Response[v1.ModResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("calculator.v1.Calculator.Mod is not implemented"))
}
